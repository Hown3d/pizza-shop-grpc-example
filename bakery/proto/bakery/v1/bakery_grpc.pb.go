// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bakery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BakeryServiceClient is the client API for BakeryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BakeryServiceClient interface {
	// Needs a PizzaRequest and returns a stream of pizzas
	BakePizza(ctx context.Context, in *BakePizzaRequest, opts ...grpc.CallOption) (BakeryService_BakePizzaClient, error)
}

type bakeryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBakeryServiceClient(cc grpc.ClientConnInterface) BakeryServiceClient {
	return &bakeryServiceClient{cc}
}

func (c *bakeryServiceClient) BakePizza(ctx context.Context, in *BakePizzaRequest, opts ...grpc.CallOption) (BakeryService_BakePizzaClient, error) {
	stream, err := c.cc.NewStream(ctx, &BakeryService_ServiceDesc.Streams[0], "/bakery.v1.BakeryService/BakePizza", opts...)
	if err != nil {
		return nil, err
	}
	x := &bakeryServiceBakePizzaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BakeryService_BakePizzaClient interface {
	Recv() (*BakePizzaResponse, error)
	grpc.ClientStream
}

type bakeryServiceBakePizzaClient struct {
	grpc.ClientStream
}

func (x *bakeryServiceBakePizzaClient) Recv() (*BakePizzaResponse, error) {
	m := new(BakePizzaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BakeryServiceServer is the server API for BakeryService service.
// All implementations must embed UnimplementedBakeryServiceServer
// for forward compatibility
type BakeryServiceServer interface {
	// Needs a PizzaRequest and returns a stream of pizzas
	BakePizza(*BakePizzaRequest, BakeryService_BakePizzaServer) error
	mustEmbedUnimplementedBakeryServiceServer()
}

// UnimplementedBakeryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBakeryServiceServer struct {
}

func (UnimplementedBakeryServiceServer) BakePizza(*BakePizzaRequest, BakeryService_BakePizzaServer) error {
	return status.Errorf(codes.Unimplemented, "method BakePizza not implemented")
}
func (UnimplementedBakeryServiceServer) mustEmbedUnimplementedBakeryServiceServer() {}

// UnsafeBakeryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BakeryServiceServer will
// result in compilation errors.
type UnsafeBakeryServiceServer interface {
	mustEmbedUnimplementedBakeryServiceServer()
}

func RegisterBakeryServiceServer(s grpc.ServiceRegistrar, srv BakeryServiceServer) {
	s.RegisterService(&BakeryService_ServiceDesc, srv)
}

func _BakeryService_BakePizza_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BakePizzaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BakeryServiceServer).BakePizza(m, &bakeryServiceBakePizzaServer{stream})
}

type BakeryService_BakePizzaServer interface {
	Send(*BakePizzaResponse) error
	grpc.ServerStream
}

type bakeryServiceBakePizzaServer struct {
	grpc.ServerStream
}

func (x *bakeryServiceBakePizzaServer) Send(m *BakePizzaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BakeryService_ServiceDesc is the grpc.ServiceDesc for BakeryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BakeryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bakery.v1.BakeryService",
	HandlerType: (*BakeryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BakePizza",
			Handler:       _BakeryService_BakePizza_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bakery/v1/bakery.proto",
}
